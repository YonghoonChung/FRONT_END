Ajax(Asynchronous JavaScript And XML)
    동기적(동기화)
        두가지 이상의 다른 것을 같게 하는것

    동기적 통신-> 차례로 통신을 수행
    비동기적 통신-> 동시에 통신을 수행

    웹페이지 전체를 다시 로딩하지 않고 백드라운드 영역에서 서버와 통신하여 그 결과를 리턴받고 웹 페이지의 일부분을 갱신할 수 있게 하는 기술
    빠르게 동작하는 웹 페이지를 만들기 위한 개발 기법
    서버와 데이터를 주고 받을 수 있는데 이 때 대표적인 데이터는 JSON,XML, HTML, 텍스트 등이 있다.

    장점
        웹 페이지 전체를 다시 로드하지 않아도 일부분만을 갱신할 수 있음
        웹 페이지가 완전히 로드된 후에 서버로 데이터 요청을 보낼 수 있음
        다양한 UI를 구현할 수 있음
        페이지 이동 없이 백드라운드 영역에서 서버로 데이터를 전송할 수 있음

        예) 아이디, 비밀번호 중복 , 실시간 검색어(1분마다 새로운 트래픽을 받을 수 있다.)

    단점
        페이지 이동이 없기 때문에 히스토리 관리가 안됨
        바이너리 데이터를 전달할 수 없음
        서버 푸싱 방식의 실시간 서비스를 만들 수 없음
        
        예) 카카오톡의 채팅(0.1초마다 데이터를 요청할 수 없다.)

    장점이 훨씬 크므로 많이 사용한다

    구성요소
        웹페이지의 표현을 위한 HTML, CSS
        데이터의 교환을 위한 JSON, XML, 텍스트,...
        웹 서버와의 비동기식 통신을 위한 XMLHttpRequest(xhr) 객체
        통신 결과를 통해 화면 구성을 동적으로 조작하기 위함 DOM 모델

    핵심 : XMLHttpRequest

XMLHttpRequest 객체
    브라우저와 서버의 통신을 위한것
    브라우저가 알아서 내부적으로 사용했다

    Ajax의 가장 핵심적인 구성요소는 바로 XMLHttpRequest 객체이다.
    이 객체는 웹 브라우저가 서버와 데이터를 교환할 때 사용된다.
    웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 바로 xhr 객체를 사용하기 때문이다

    XMLHttpRequest 객체 생성
        const 객체명 = new XMLHttpRequest();
        연결할 준비가 되어있는 상태

    XMLHttpRequest 객체의 readyState 프로퍼티 상태 값
        XMLHttpRequest.UNSET
        값이 변화될 때마다 onreadystatechange가 호출된다. // readyState가 변할때 담는 함수이다

        1. UNSET (숫자 0)
            XMLHttpRequest 객체가 생성되었을때의 상태값
            (xhr.readyState = XMLHttpRequest.UNSET)

        2. OPENED(숫자 1)
            xhr 객체의 open() 메서드가 성공적으로 실행되었을 때의 상태값

        3. HEADER_RECEIVED(숫자 2)
            모든 요청에 대한 응답이 도착했을 때의 상태값(우리가 보낸 요청이 잘 도착했을때)

        4. LOADING(숫자 3)
            요청한 데이터를 처리중일 때의 상태값

        5. DONE(숫자 4)
            요청한 데이터의 처리가 완료되어 응답할 준비가 완료되었을 때의 상태값 (처리가 잘 되었을때)

    open()
        서버로 보낼 Ajax 요청의 형식을 설정
        open("전송방식", "URL 주소", 동기여부);
        동기여부 : true(비동기), false(동기)
    
    send()
        작성된 Ajax 요청을 서버로 전송